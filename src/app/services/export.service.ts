import { Injectable } from '@angular/core';
import { TopicService } from './topic.service';
import * as ExcelJS from 'exceljs';
import { Prompt } from '../data/prompt.data';
import { Criteria } from '../data/criteria.data';

@Injectable({
  providedIn: 'root'
})
export class ExportService {

  constructor(private topicService: TopicService) { }

  generateExcel(): void {
    const workbook = new ExcelJS.Workbook();

    this.topicService.getTopics().forEach(topic => {
      const worksheet = workbook.addWorksheet(topic.name);

      // Details
      worksheet.addRow(["Topic:", topic.name]);
      this. getRatingCriteria(topic.prompts).forEach(c => {
        worksheet.addRow(["Criteria:", c.name, c.desc]);
      });
      worksheet.addRow([]);

      // Prompt Table
      worksheet.addRow(["Prompts", "", "Responses"]);
      worksheet.addRow(this.getSecondHeaderRow(topic.prompts));

      // Add data
      if (topic.prompts.length > 0) {
        const responseModels = Array.from(topic.prompts[0].responses.keys());
        topic.prompts.forEach((prompt: Prompt) => {
          const row = [prompt.request, prompt.generatedBy];
          responseModels.forEach((model) => {
            let response = prompt.responses.get(model);
            if (response) {
              row.push(response.response);
              response.ratings.forEach(r => {
                row.push(`${r.rating}`, r.explanation, r.ratedBy);
              })
            } else {
              console.log(`Prompt had no response of model ${model}`);
            }
          });
          worksheet.addRow(row);
        });
      }
    });

    // Save the workbook to a blob
    workbook.xlsx.writeBuffer().then((buffer) => {
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      this.saveAs(blob, 'equi-sense.xlsx');
    });
  }

  private saveAs(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob);
    let a = document.createElement('a');
    document.body.appendChild(a);
    a.setAttribute('style', 'display: none');
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
    a.remove();
  }

  private getSecondHeaderRow(prompts: Prompt[]): string[] {
    if (prompts.length == 0 ) { return []; }

    let headers = ["", "generated by"]; // prompts
    for (let key of Array.from(prompts[0].responses.keys())) {
      headers.push(key); // responseModel
      prompts[0].responses.get(key)!.ratings.forEach(r => {
        headers.push(`${r.criteria.name} Rating`, "Explanation", "rated by");
      });
    }

    return headers;
  }

  private getRatingCriteria(prompts: Prompt[]): Criteria[] {
    if (prompts.length == 0 ) { return []; }
    let criteria = new Set<Criteria>();
    for (let key of Array.from(prompts[0].responses.keys())) {
      prompts[0].responses.get(key)!.ratings.map(r => r.criteria).forEach(c => criteria.add(c));
    }
    return [...criteria];
  }

}
